(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split("");
function randomString(length) {
    if (length === void 0) { length = 8; }
    if (!length) {
        length = Math.floor(Math.random() * chars.length);
    }
    var str = "";
    for (var i = 0; i < length; i++) {
        str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
}
exports.randomString = randomString;
function extend(dst) {
    var srcs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        srcs[_i - 1] = arguments[_i];
    }
    srcs.forEach(function (src) {
        for (var prop in src) {
            if (src.hasOwnProperty(prop)) {
                dst[prop] = src[prop];
            }
        }
    });
    return dst;
}
exports.extend = extend;
function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.clone = clone;
},{}],2:[function(require,module,exports){
var Utils = require("../common/utils");
var ViewModel = require("./view-model");
exports.defaultConfiguration = {
    rootNode: null,
    socketEventName: "board",
    throttlingInterval: 1000
};
function start(config) {
    var app = new App();
    config = Utils.extend({}, exports.defaultConfiguration, config);
    app.start(config);
}
exports.start = start;
var App = (function () {
    function App() {
        var _this = this;
        this.shadowServer = {};
        this.shadowClient = {};
        this.boardVM = new ViewModel.Board();
        this.onMessage = function (msg) {
            var board = msg.board;
            var patch = msg.patch;
            if (board) {
            }
            else if (patch) {
                _this.applyServerPatch(patch);
            }
        };
        this.onInterval = function () {
            var current = _this.boardVM.toPlain();
            var myChanges = rfc6902.createPatch(_this.shadowServer, current);
            if (myChanges.length) {
                _this.socket.emit(_this.socketEventName, { patch: myChanges });
            }
        };
    }
    App.prototype.applyServerPatch = function (serverChanges) {
        var current = this.boardVM.toPlain();
        var myChanges = rfc6902.createPatch(this.shadowClient, current);
        rfc6902.applyPatch(this.shadowServer, Utils.clone(serverChanges));
        rfc6902.applyPatch(current, serverChanges);
        rfc6902.applyPatch(current, myChanges);
        this.boardVM.update(current);
        this.shadowClient = this.boardVM.toPlain();
    };
    App.prototype.start = function (config) {
        this.socketEventName = config.socketEventName;
        this.boardVM.update(this.shadowServer);
        this.boardVM.applyBindings(config.rootNode);
        this.shadowClient = this.boardVM.toPlain();
        this.socket = io();
        this.socket.on(this.socketEventName, this.onMessage);
        setInterval(this.onInterval, config.throttlingInterval);
    };
    return App;
})();
},{"../common/utils":1,"./view-model":6}],3:[function(require,module,exports){
function register() {
    var _dragged;
    var _xFix;
    var _yFix;
    ko.bindingHandlers["drag"] = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            element.setAttribute("draggable", "true");
            element.addEventListener("dragstart", function (e) {
                e.dataTransfer.setData("data", "data");
                _xFix = e.clientX - viewModel.posX();
                _yFix = e.clientY - viewModel.posY();
                _dragged = viewModel;
            }, false);
        }
    };
    ko.bindingHandlers["drop"] = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            element.addEventListener("dragover", function (e) {
                e.preventDefault();
                return false;
            });
            element.addEventListener("drop", function (e) {
                _dragged.posX(e.clientX - _xFix);
                _dragged.posY(e.clientY - _yFix);
                return false;
            });
        }
    };
}
exports.register = register;
},{}],4:[function(require,module,exports){
function register() {
    ko.bindingHandlers["jeditable"] = {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var options = allBindingsAccessor().jeditableOptions || {};
            if (!options.onblur) {
                options.onblur = "submit";
            }
            $(element).editable(function (value, params) {
                valueAccessor()(value);
                return value;
            }, options);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).editable("destroy");
            });
        },
        update: function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor());
            $(element).html(value);
        }
    };
}
exports.register = register;
},{}],5:[function(require,module,exports){
var DragNDrop = require("./kobindings/dragndrop");
DragNDrop.register();
var JEditable = require("./kobindings/jeditable");
JEditable.register();
var App = require("./app");
App.start();
},{"./app":2,"./kobindings/dragndrop":3,"./kobindings/jeditable":4}],6:[function(require,module,exports){
var Utils = require("../common/utils");
var Note = (function () {
    function Note() {
        var _this = this;
        this.title = ko.observable();
        this.content = ko.observable();
        this.posX = ko.observable(0);
        this.posY = ko.observable(0);
        this.style = ko.computed(function () {
            var posX = _this.posX();
            var posY = _this.posY();
            return {
                top: posY ? posY + "px" : "0",
                left: posX ? posX + "px" : "0",
                display: posX != null && posY != null ? "block" : "none"
            };
        });
    }
    Note.prototype.update = function (plain) {
        this.title(plain.title);
        this.content(plain.content);
        this.posX(plain.posX);
        this.posY(plain.posY);
    };
    Note.prototype.toPlain = function () {
        var result = {};
        AddTruthyValue(result, "title", this.title());
        AddTruthyValue(result, "content", this.content());
        AddNumberValue(result, "posX", this.posX());
        AddNumberValue(result, "posY", this.posY());
        return result;
    };
    return Note;
})();
exports.Note = Note;
function AddTruthyValue(destination, key, value) {
    if (value) {
        destination[key] = value;
    }
}
function AddNumberValue(destination, key, value) {
    if (Object.prototype.toString.call(value) == "[object Number]") {
        destination[key] = value;
    }
}
var Board = (function () {
    function Board() {
        var _this = this;
        this.name = ko.observable();
        this.color = ko.observable();
        this.notes = ko.observableArray([]);
        this.notesById = {};
        this.newNote = function () {
            var note = _this.createNote();
            note.posX(0);
            note.posY(0);
            return note;
        };
    }
    Board.prototype.createNote = function (id) {
        if (id === void 0) { id = null; }
        id = id || Utils.randomString();
        var note = new Note();
        note.id = id;
        note.title("Title here");
        note.content("Content here");
        this.notesById[id] = note;
        this.notes.push(note);
        return note;
    };
    Board.prototype.deleteNote = function (id) {
        var note = this.notesById[id];
        delete this.notesById[id];
        this.notes.remove(note);
    };
    Board.prototype.update = function (plain) {
        this.name(plain.name);
        this.color(plain.color);
        var notes = plain.notes || {};
        for (var id in notes) {
            var noteVM = this.notesById[id];
            if (!noteVM) {
                noteVM = this.createNote(id);
            }
            noteVM.update(notes[id]);
        }
        for (var id in this.notesById) {
            if (!notes[id]) {
                this.deleteNote(id);
            }
        }
    };
    Board.prototype.toPlain = function () {
        var result = {};
        AddTruthyValue(result, "name", this.name());
        AddTruthyValue(result, "color", this.color());
        var noteVMs = this.notes();
        if (noteVMs.length) {
            var notes = {};
            for (var i in noteVMs) {
                var noteVM = noteVMs[i];
                notes[noteVM.id] = noteVM.toPlain();
            }
            result.notes = notes;
        }
        return result;
    };
    Board.prototype.applyBindings = function (rootNode) {
        ko.applyBindings(this, rootNode);
    };
    return Board;
})();
exports.Board = Board;
},{"../common/utils":1}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
